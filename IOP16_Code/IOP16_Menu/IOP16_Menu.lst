ADR LABEL		MACH	OPC	V1[,V2]			// COMMENT
000	START		0xC0CC	JSR	INITVDU			// INITIALIZE THE VDU
001				0xC0B9	JSR	INITUART		// INITIALIZE THE ACIA UART
002	RPT_MENU	0xC08B	JSR	PRINTMENU		// PRINT THE MENU
003	GETOPT		0xC0B0	JSR	RDKBD			// READ UART RX TO REG1
004				0x5131	CMP	Reg1,0X31		// OPT01 SELECTED
005				0xF008	BNE	SKIPOPT01		// 
006				0xC020	JSR	RUNOPT01		// GO OPTION 1
007				0xD01F	JMP	DONEMENU		// 
008	SKIPOPT01	0x5132	CMP	Reg1,0X32		// OPT02 SELECTED
009				0xF00C	BNE	SKIPOPT02		// 
00a				0xC02D	JSR	RUNOPT02		// GO OPTION 2
00b				0xD01F	JMP	DONEMENU		// 
00c	SKIPOPT02	0x5133	CMP	Reg1,0X33		// OPT02 SELECTED
00d				0xF010	BNE	SKIPOPT03		// 
00e				0xC038	JSR	RUNOPT03		// GO OPTION 3
00f				0xD01F	JMP	DONEMENU		// 
010	SKIPOPT03	0x5134	CMP	Reg1,0X34		// OPT02 SELECTED
011				0xF014	BNE	SKIPOPT04		// 
012				0xC044	JSR	RUNOPT04		// GO OPTION 4
013				0xD01F	JMP	DONEMENU		// 
014	SKIPOPT04	0x5135	CMP	Reg1,0X35		// OPT05 SELECTED
015				0xF018	BNE	SKIPOPT05		// 
016				0xC04F	JSR	RUNOPT05		// GO OPTION 5
017				0xD01F	JMP	DONEMENU		// 
018	SKIPOPT05	0x5136	CMP	Reg1,0X36		// OPT06 SELECTED
019				0xF01C	BNE	SKIPOPT06		// 
01a				0xC062	JSR	RUNOPT06		// GO OPTION 7
01b				0xD01F	JMP	DONEMENU		// 
01c	SKIPOPT06	0x5137	CMP	Reg1,0X37		// OPT07 SELECTED
01d				0xF01F	BNE	DONEMENU		// 
01e				0xC06D	JSR	RUNOPT07		// GO OPTION 7
01f	DONEMENU	0xD002	JMP	RPT_MENU		// 
020	RUNOPT01	0x4131	LRI	Reg1,0X31		// ECHO ‘1’
021				0xC0DD	JSR	WRVDU			// 
022				0xC0E4	JSR	VDUCRLF			// CR
023				0x408A	LRI	Reg0,CTLCEXIT	// 
024				0xC0A5	JSR	PRSTRLF			// 
025	RPTOPT01	0xC0E9	JSR	CHKCTLC			// 
026				0x5001	CMP	Reg0,0X01		// 
027				0xE02B	BEQ	EXITOPT1		// 
028				0xC0BE	JSR	RDUART			// 
029	OPT1OUT		0xC0DD	JSR	WRVDU			// 
02a				0xD025	JMP	RPTOPT01		// 
02b	EXITOPT1	0xC0E4	JSR	VDUCRLF			// 
02c				0x3008	RTS					// 
02d	RUNOPT02	0x4132	LRI	Reg1,0X32		// ECHO ‘2’
02e				0xC0DD	JSR	WRVDU			// 
02f				0xC0E4	JSR	VDUCRLF			// 
030				0x408A	LRI	Reg0,CTLCEXIT	// 
031				0xC0A5	JSR	PRSTRLF			// 
032	RPTOPT02	0xC0B0	JSR	RDKBD			// 
033				0x5103	CMP	Reg1,0X03		// 
034				0xE037	BEQ	EXITOPT2		// 
035	OPT2OUT		0xC0C5	JSR	WRUART			// 
036				0xD032	JMP	RPTOPT02		// 
037	EXITOPT2	0x3008	RTS					// 
038	RUNOPT03	0x4133	LRI	Reg1,0X33		// ECHO ‘3’
039				0xC0DD	JSR	WRVDU			// 
03a				0xC0E4	JSR	VDUCRLF			// CR
03b				0x408A	LRI	Reg0,CTLCEXIT	// 
03c				0xC0A5	JSR	PRSTRLF			// 
03d	RPTOPT03	0xC0E9	JSR	CHKCTLC			// CHECK KBD FOR CTRL-C
03e				0x5001	CMP	Reg0,0X01		// 
03f				0xE043	BEQ	EXITOP3			// 
040				0xC0BE	JSR	RDUART			// 
041				0xC0C5	JSR	WRUART			// 
042				0xD03D	JMP	RPTOPT03		// 
043	EXITOP3		0x3008	RTS					// 
044	RUNOPT04	0x4134	LRI	Reg1,0X34		// ECHO ‘4’
045				0xC0DD	JSR	WRVDU			// 
046				0xC0E4	JSR	VDUCRLF			// CR
047				0x408A	LRI	Reg0,CTLCEXIT	// 
048				0xC0A5	JSR	PRSTRLF			// 
049	RPTOPT04	0xC0B0	JSR	RDKBD			// 
04a				0x5103	CMP	Reg1,0X03		// CTRL-C
04b				0xE04E	BEQ	EXIT04			// 
04c				0xC0DD	JSR	WRVDU			// 
04d				0xD049	JMP	RPTOPT04		// 
04e	EXIT04		0x3008	RTS					// 
04f	RUNOPT05	0x4135	LRI	Reg1,0X35		// ECHO ‘5’
050				0xC0DD	JSR	WRVDU			// 
051				0xC0E4	JSR	VDUCRLF			// CR
052				0x408A	LRI	Reg0,CTLCEXIT	// 
053				0xC0A5	JSR	PRSTRLF			// 
054	RPTOPT05	0xC0E9	JSR	CHKCTLC			// CHECK KBD FOR CTRL-C
055				0x5001	CMP	Reg0,0X01		// 
056				0xE061	BEQ	EXIT05			// 
057				0x7800	IOW	#0x00,USR_LED	// WRITE 0 TO LED
058				0x4101	LRI	Reg1,0X01		// 
059				0xC0F3	JSR	WAITSECS		// 
05a				0xC0E9	JSR	CHKCTLC			// CHECK KBD FOR CTRL-C
05b				0x5001	CMP	Reg0,0X01		// 
05c				0xE061	BEQ	EXIT05			// 
05d				0x7900	IOW	#0x01,USR_LED	// WRITE 1 TO LED
05e				0x4101	LRI	Reg1,0X01		// 
05f				0xC0F3	JSR	WAITSECS		// 
060				0xD054	JMP	RPTOPT05		// 
061	EXIT05		0x3008	RTS					// 
062	RUNOPT06	0x4136	LRI	Reg1,0X36		// ECHO ‘6’
063				0xC0DD	JSR	WRVDU			// 
064				0xC0E4	JSR	VDUCRLF			// CR
065				0x408A	LRI	Reg0,CTLCEXIT	// 
066				0xC0A5	JSR	PRSTRLF			// 
067	RPTOPT06	0x6001	IOR	Reg0,RD_KEY		// READ KEY TO REG0
068				0x7000	IOW	Reg0,USR_LED	// WRITE LED FROM REG0
069				0xC0E9	JSR	CHKCTLC			// CHECK KBD FOR CTRL-C
06a				0x5001	CMP	Reg0,0X01		// 
06b				0xF067	BNE	RPTOPT06		// 
06c	EXIT06		0x3008	RTS					// 
06d	RUNOPT07	0x4137	LRI	Reg1,0X37		// ECHO ‘7’
06e				0xC0DD	JSR	WRVDU			// 
06f				0xC0E4	JSR	VDUCRLF			// CR-LF
070				0x408A	LRI	Reg0,CTLCEXIT	// PRINT CTRL-C TO EXIT
071				0xC0A5	JSR	PRSTRLF			// 
072	LOOPOPT7C	0x4201	LRI	Reg2,0X01		// ROUTINE TO BOUNCE LED ON GPIOS
073	LOOPOPT7A	0x7210	IOW	Reg2,WR_GPIO3	// REG2 HAS VALUE TO BOUNCE
074				0x41C8	LRI	Reg1,0XC8		// 200 mSEC COUNT IN REG1
075				0xC0F8	JSR	WAITMSECS		// 
076				0x3201	SLL	Reg2,0X01		// SHIFT BIT OVER
077				0x5200	CMP	Reg2,0X00		// 
078				0xF073	BNE	LOOPOPT7A		// 
079				0x42	LRI	Reg2,MENUTOP	// 
07a				0x7210	IOW	Reg2,WR_GPIO3	// 
07b				0x4201	LRI	Reg2,0X01		// 
07c	LOOPOPT7B	0x7211	IOW	Reg2,WR_GPIO4	// REG2 HAS VALUE TO BOUNCE
07d				0x41C8	LRI	Reg1,0XC8		// 200 mSEC COUNT IN REG1
07e				0xC0F8	JSR	WAITMSECS		// 
07f				0x3201	SLL	Reg2,0X01		// SHIFT BIT OVER
080				0x5200	CMP	Reg2,0X00		// 
081				0xF07C	BNE	LOOPOPT7B		// 
082				0x4200	LRI	Reg2,0X00		// 
083				0x7211	IOW	Reg2,WR_GPIO4	// 
084				0xC0E9	JSR	CHKCTLC			// CHECK KBD FOR CTRL-C
085				0x5001	CMP	Reg0,0X01		// 
086				0xF072	BNE	LOOPOPT7C		// 
087				0x4200	LRI	Reg2,0X00		// 
088				0x7210	IOW	Reg2,WR_GPIO3	// CLEAR OUTPUTS
089				0x7211	IOW	Reg2,WR_GPIO4	// CLEAR OUTPUTS
08a				0x3008	RTS					// 
08b	PRINTMENU	0x4000	LRI	Reg0,MENUTOP	// PRINT BANNER
08c				0xC0A5	JSR	PRSTRLF			// PRINT OUT STRING TO VDU
08d				0x4017	LRI	Reg0,OPT01		// PRINT MENU OPT01
08e				0xC0A5	JSR	PRSTRLF			// 
08f				0x4022	LRI	Reg0,OPT02		// PRINT MENU OPT02
090				0xC0A5	JSR	PRSTRLF			// 
091				0x402E	LRI	Reg0,OPT03		// PRINT MENU OPT03
092				0xC0A5	JSR	PRSTRLF			// 
093				0x403E	LRI	Reg0,OPT04		// PRINT MENU OPT04
094				0xC0A5	JSR	PRSTRLF			// 
095				0x404E	LRI	Reg0,OPT05		// PRINT MENU OPT05
096				0xC0A5	JSR	PRSTRLF			// 
097				0x405A	LRI	Reg0,OPT06		// PRINT MENU OPT06
098				0xC0A5	JSR	PRSTRLF			// 
099				0x4064	LRI	Reg0,OPT07		// PRINT MENU OPT07
09a				0xC0A5	JSR	PRSTRLF			// 
09b				0x4079	LRI	Reg0,SELOPT		// PRINT MENU SELECT OPT
09c				0xC09E	JSR	PRSTR			// 
09d				0x3008	RTS					// 
09e	PRSTR		0x700E	IOW	Reg0,LD_CON_ADR	// LOAD CONSTANTS ADDRESS
09f	PRSTR3		0x610E	IOR	Reg1,RD_CON_DAT	// READ CHAR (NEXT)
0a0				0x5100	CMP	Reg1,0X00		// IS END OF STRING?
0a1				0xF0A3	BNE	SKIPPS3			// NOT END OF STRING
0a2				0x3008	RTS					// RETURN IF END
0a3	SKIPPS3		0xC0DD	JSR	WRVDU			// PRINT TO VDU
0a4				0xD09F	JMP	PRSTR3			// LOOP UNTIL NULL TERM
0a5	PRSTRLF		0x700E	IOW	Reg0,LD_CON_ADR	// LOAD CONSTANTS ADDRESS
0a6	PRSTR2		0x610E	IOR	Reg1,RD_CON_DAT	// READ CHAR (NEXT)
0a7				0x5100	CMP	Reg1,0X00		// IS END OF STRING?
0a8				0xF0AE	BNE	SKIPPS			// NOT END OF STRING
0a9				0x410D	LRI	Reg1,0X0D		// CR
0aa				0xC0DD	JSR	WRVDU			// 
0ab				0x410A	LRI	Reg1,0X0A		// LF
0ac				0xC0DD	JSR	WRVDU			// 
0ad				0x3008	RTS					// RETURN IF END
0ae	SKIPPS		0xC0DD	JSR	WRVDU			// PRINT TO VDU
0af				0xD0A6	JMP	PRSTR2			// LOOP UNTIL NULL TERM
0b0	RDKBD		0xC0B3	JSR	WTKBRX			// WAIT FOR KBD RX CHAR
0b1				0x610D	IOR	Reg1,KBD_DATA	// READ KBD CHAR
0b2				0x3008	RTS					// 
0b3	WTKBRX		0x600C	IOR	Reg0,KBD_STAT	// READ KBD STATUS
0b4				0xA001	ARI	Reg0,0X01		// RX RDY BIT
0b5				0xE0B3	BEZ	WTKBRX			// LOOP UNTIL CHAR PRESENT
0b6				0x3008	RTS					// 
0b7	POLLKBD		0x610C	IOR	Reg1,KBD_STAT	// 
0b8				0x3008	RTS					// 
0b9	INITUART	0x4003	LRI	Reg0,0X03		// RESET UART COMMAND
0ba				0x7008	IOW	Reg0,UART_CTRL	// WRITE UART CMD REG
0bb				0x4020	LRI	Reg0,0X20		// TX CTRLS RTS
0bc				0x7008	IOW	Reg0,UART_CTRL	// WRITE UART CMD REG
0bd				0x3008	RTS					// 
0be	RDUART		0xC0C1	JSR	WTUARTRXRDY		// WAIT FOR UART RX CHAR
0bf				0x6109	IOR	Reg1,UART_RX	// READ UART CHAR
0c0				0x3008	RTS					// RETURN KBD DATA IN REG1
0c1	WTUARTRXRDY	0x6108	IOR	Reg1,UART_STAT	// READ UART STATUS
0c2				0xA101	ARI	Reg1,0X01		// RX RDY BIT
0c3				0xE0C1	BEZ	WTUARTRXRDY		// LOOP UNTIL CHAR PRESENT
0c4				0x3008	RTS					// 
0c5	WRUART		0xC0C8	JSR	WTUARTTXBSY		// WRITE REG1 TO THE UART TX
0c6				0x7109	IOW	Reg1,UART_TX	// 
0c7				0x3008	RTS					// 
0c8	WTUARTTXBSY	0x6008	IOR	Reg0,UART_STAT	// WRITE REG1 OUT UART
0c9				0xA002	ARI	Reg0,0X02		// TX EMPTY BIT
0ca				0xE0C8	BEZ	WTUARTTXBSY		// LOOP WHILE NOT EMPTY
0cb				0x3008	RTS					// 
0cc	INITVDU		0x4003	LRI	Reg0,0X03		// RESET TERMINAL COMMAND
0cd				0x700A	IOW	Reg0,VDU_CTRL	// WRITE VDU CMD REG
0ce				0x4020	LRI	Reg0,0X20		// TX CTRLS RTS
0cf				0x700A	IOW	Reg0,VDU_CTRL	// WRITE VDU CMD REG
0d0	CLRSCR		0x410C	LRI	Reg1,0X0C		// ANSI CLEAR THE SCREEN CMD
0d1				0xC0DD	JSR	WRVDU			// WRITE OUT CHAR IN R1
0d2	YELLOW		0x411B	LRI	Reg1,0X1B		// ESC SEQ FOR YELLOW CHARS
0d3				0xC0DD	JSR	WRVDU			// WRITE OUT CHAR IN R1
0d4				0x415B	LRI	Reg1,0X5B		// [
0d5				0xC0DD	JSR	WRVDU			// WRITE OUT CHAR IN R1
0d6				0x4133	LRI	Reg1,0X33		// 3
0d7				0xC0DD	JSR	WRVDU			// WRITE OUT CHAR IN R1
0d8				0x4133	LRI	Reg1,0X33		// 3
0d9				0xC0DD	JSR	WRVDU			// WRITE OUT CHAR IN R1
0da				0x416D	LRI	Reg1,0X6D		// m 
0db				0xC0DD	JSR	WRVDU			// WRITE OUT CHAR IN R1
0dc				0x3008	RTS					// 
0dd	WRVDU		0xC0E0	JSR	WTVDUTXRDY		// WAIT VDU TX READY
0de				0x710B	IOW	Reg1,VDU_TX		// WRITE OUT R1 TO SCREEN
0df				0x3008	RTS					// 
0e0	WTVDUTXRDY	0x600A	IOR	Reg0,VDU_STAT	// READ VDU STATUS
0e1				0xA002	ARI	Reg0,0X02		// TX EMPTY FLAG
0e2				0xE0E0	BEZ	WTVDUTXRDY		// WAIT UNTIL TX EMPTY
0e3				0x3008	RTS					// 
0e4	VDUCRLF		0x410D	LRI	Reg1,0X0D		// CR
0e5				0xC0DD	JSR	WRVDU			// 
0e6				0x410A	LRI	Reg1,0X0A		// LF
0e7				0xC0DD	JSR	WRVDU			// 
0e8				0x3008	RTS					// 
0e9	CHKCTLC		0x610C	IOR	Reg1,KBD_STAT	// READ KBD STATUS
0ea				0x5100	CMP	0x01,0X00		// 
0eb				0xE0F1	BEQ	DONCTLC			// KEY WAS NOT PRESSED
0ec	SKPCTLC		0x600D	IOR	Reg0,KBD_DATA	// READ KBD DATA
0ed				0x5003	CMP	Reg0,0X03		// IS CTRL-C
0ee				0xF0F1	BNE	DONCTLC			// 
0ef				0x4001	LRI	Reg0,0X01		// RETURNS 1 IF CTRL-C
0f0				0xD0F2	JMP	EXITCTLC		// 
0f1	DONCTLC		0x4000	LRI	Reg0,0X00		// 
0f2	EXITCTLC	0x3008	RTS					// 
0f3	WAITSECS	0x7106	IOW	Reg1,WR_TIME_S	// STORE REG0 TO START TIMER
0f4	WTLPSEC		0x6104	IOR	Reg1,TIME_STAT	// READ TIMER
0f5				0xA101	ARI	Reg1,0X01		// CHECK BUSY
0f6				0xF0F4	BNZ	WTLPSEC			// 
0f7				0x3008	RTS					// 
0f8	WAITMSECS	0x7105	IOW	Reg1,WR_TIME_MS	// STORE REG0 TO START TIMER
0f9	WTLPMSEC	0x6104	IOR	Reg1,TIME_STAT	// READ TIMER
0fa				0xA101	ARI	Reg1,0X01		// CHECK BUSY
0fb				0xF0F9	BNZ	WTLPMSEC		// 
0fc				0x3008	RTS					// 
