ADR LABEL		MACH	OPC	V1[,V2]			// COMMENT
000	START		0xC0A8	JSR	INITVDU			// INITIALIZE THE VDU
001				0xC095	JSR	INITUART		// INITIALIZE THE ACIA UART
002	RPT_MENU	0xC069	JSR	PRINTMENU		// PRINT THE MENU
003	GETOPT		0xC08C	JSR	RDKBD			// READ UART RX TO REG1
004				0x5131	CMP	Reg1,0X31		// OPT01 SELECTED
005				0xF008	BNE	SKIPOPT01		// 
006				0xC01C	JSR	RUNOPT01		// GO OPTION 1
007				0xD01B	JMP	DONEMENU		// 
008	SKIPOPT01	0x5132	CMP	Reg1,0X32		// OPT02 SELECTED
009				0xF00C	BNE	SKIPOPT02		// 
00a				0xC029	JSR	RUNOPT02		// GO OPTION 2
00b				0xD01B	JMP	DONEMENU		// 
00c	SKIPOPT02	0x5133	CMP	Reg1,0X33		// OPT02 SELECTED
00d				0xF010	BNE	SKIPOPT03		// 
00e				0xC034	JSR	RUNOPT03		// GO OPTION 3
00f				0xD01B	JMP	DONEMENU		// 
010	SKIPOPT03	0x5134	CMP	Reg1,0X34		// OPT02 SELECTED
011				0xF014	BNE	SKIPOPT04		// 
012				0xC040	JSR	RUNOPT04		// GO OPTION 4
013				0xD01B	JMP	DONEMENU		// 
014	SKIPOPT04	0x5135	CMP	Reg1,0X35		// OPT05 SELECTED
015				0xF018	BNE	SKIPOPT05		// 
016				0xC04B	JSR	RUNOPT05		// GO OPTION 5
017				0xD01B	JMP	DONEMENU		// 
018	SKIPOPT05	0x5136	CMP	Reg1,0X36		// OPT06 SELECTED
019				0xF01B	BNE	DONEMENU		// 
01a				0xC05E	JSR	RUNOPT06		// GO OPTION 6
01b	DONEMENU	0xD002	JMP	RPT_MENU		// 
01c	RUNOPT01	0x4131	LRI	Reg1,0X31		// ECHO ‘1’
01d				0xC0B9	JSR	WRVDU			// 
01e				0xC0C0	JSR	VDUCRLF,0X0D	// CR
01f				0x4075	LRI	Reg0,CTLCEXIT	// 
020				0xC081	JSR	PRSTRLF			// 
021	RPTOPT01	0xC0C5	JSR	CHKCTLC			// 
022				0x5001	CMP	Reg0,0X01		// 
023				0xE027	BEQ	EXITOPT1		// 
024				0xC09A	JSR	RDUART			// 
025	OPT1OUT		0xC0B9	JSR	WRVDU			// 
026				0xD021	JMP	RPTOPT01		// 
027	EXITOPT1	0xC0C0	JSR	VDUCRLF			// 
028				0x3008	RTS					// 
029	RUNOPT02	0x4132	LRI	Reg1,0X32		// ECHO ‘2’
02a				0xC0B9	JSR	WRVDU			// 
02b				0xC0C0	JSR	VDUCRLF			// 
02c				0x4075	LRI	Reg0,CTLCEXIT	// 
02d				0xC081	JSR	PRSTRLF			// 
02e	RPTOPT02	0xC08C	JSR	RDKBD			// 
02f				0x5103	CMP	Reg1,0X03		// 
030				0xE033	BEQ	EXITOPT2		// 
031	OPT2OUT		0xC0A1	JSR	WRUART			// 
032				0xD02E	JMP	RPTOPT02		// 
033	EXITOPT2	0x3008	RTS					// 
034	RUNOPT03	0x4133	LRI	Reg1,0X33		// ECHO ‘3’
035				0xC0B9	JSR	WRVDU			// 
036				0xC0C0	JSR	VDUCRLF,0X0D	// CR
037				0x4075	LRI	Reg0,CTLCEXIT	// 
038				0xC081	JSR	PRSTRLF			// 
039	RPTOPT03	0xC0C5	JSR	CHKCTLC			// CHECK KBD FOR CTRL-C
03a				0x5001	CMP	Reg0,0X01		// 
03b				0xE03F	BEQ	EXITOP3			// 
03c				0xC09A	JSR	RDUART			// 
03d				0xC0A1	JSR	WRUART			// 
03e				0xD039	JMP	RPTOPT03		// 
03f	EXITOP3		0x3008	RTS					// 
040	RUNOPT04	0x4134	LRI	Reg1,0X34		// ECHO ‘4’
041				0xC0B9	JSR	WRVDU			// 
042				0xC0C0	JSR	VDUCRLF,0X0D	// CR
043				0x4075	LRI	Reg0,CTLCEXIT	// 
044				0xC081	JSR	PRSTRLF			// 
045	RPTOPT04	0xC08C	JSR	RDKBD			// 
046				0x5103	CMP	Reg1,0X03		// CTRL-C
047				0xE04A	BEQ	EXIT04			// 
048				0xC0B9	JSR	WRVDU			// 
049				0xD045	JMP	RPTOPT04		// 
04a	EXIT04		0x3008	RTS					// 
04b	RUNOPT05	0x4135	LRI	Reg1,0X35		// ECHO ‘5’
04c				0xC0B9	JSR	WRVDU			// 
04d				0xC0C0	JSR	VDUCRLF,0X0D	// CR
04e				0x4075	LRI	Reg0,CTLCEXIT	// 
04f				0xC081	JSR	PRSTRLF			// 
050	RPTOPT05	0xC0C5	JSR	CHKCTLC			// CHECK KBD FOR CTRL-C
051				0x5001	CMP	Reg0,0X01		// 
052				0xE05D	BEQ	EXIT05			// 
053				0x7800	IOW	#0x00,USR_LED	// WRITE 0 TO LED
054				0x4101	LRI	Reg1,0X01		// 
055				0xC0CF	JSR	WAITSECS		// 
056				0xC0C5	JSR	CHKCTLC			// CHECK KBD FOR CTRL-C
057				0x5001	CMP	Reg0,0X01		// 
058				0xE05D	BEQ	EXIT05			// 
059				0x7900	IOW	#0x01,USR_LED	// WRITE 1 TO LED
05a				0x4101	LRI	Reg1,0X01		// 
05b				0xC0CF	JSR	WAITSECS		// 
05c				0xD050	JMP	RPTOPT05		// 
05d	EXIT05		0x3008	RTS					// 
05e	RUNOPT06	0x4136	LRI	Reg1,0X36		// ECHO ‘6’
05f				0xC0B9	JSR	WRVDU			// 
060				0xC0C0	JSR	VDUCRLF,0X0D	// CR
061				0x4075	LRI	Reg0,CTLCEXIT	// 
062				0xC081	JSR	PRSTRLF			// 
063	RPTOPT06	0x6001	IOR	Reg0,RD_KEY		// READ KEY TO REG0
064				0x7000	IOW	Reg0,USR_LED	// WRITE LED FROM REG0
065				0xC0C5	JSR	CHKCTLC			// CHECK KBD FOR CTRL-C
066				0x5001	CMP	Reg0,0X01		// 
067				0xF063	BNE	RPTOPT06		// 
068	EXIT06		0x3008	RTS					// 
069	PRINTMENU	0x4000	LRI	Reg0,MENUTOP	// PRINT BANNER
06a				0xC081	JSR	PRSTRLF			// PRINT OUT STRING TO VDU
06b				0x4017	LRI	Reg0,OPT01		// PRINT MENU OPT01
06c				0xC081	JSR	PRSTRLF			// 
06d				0x4022	LRI	Reg0,OPT02		// PRINT MENU OPT02
06e				0xC081	JSR	PRSTRLF			// 
06f				0x402E	LRI	Reg0,OPT03		// PRINT MENU OPT03
070				0xC081	JSR	PRSTRLF			// 
071				0x403E	LRI	Reg0,OPT04		// PRINT MENU OPT04
072				0xC081	JSR	PRSTRLF			// 
073				0x404E	LRI	Reg0,OPT05		// PRINT MENU OPT05
074				0xC081	JSR	PRSTRLF			// 
075				0x405A	LRI	Reg0,OPT06		// PRINT MENU OPT06
076				0xC081	JSR	PRSTRLF			// 
077				0x4064	LRI	Reg0,SELOPT		// PRINT MENU SELECT OPT
078				0xC07A	JSR	PRSTR			// 
079				0x3008	RTS					// 
07a	PRSTR		0x700E	IOW	Reg0,LD_CON_ADR	// LOAD CONSTANTS ADDRESS
07b	PRSTR3		0x610E	IOR	Reg1,RD_CON_DAT	// READ CHAR (NEXT)
07c				0x5100	CMP	Reg1,0X00		// IS END OF STRING?
07d				0xF07F	BNE	SKIPPS3			// NOT END OF STRING
07e				0x3008	RTS					// RETURN IF END
07f	SKIPPS3		0xC0B9	JSR	WRVDU			// PRINT TO VDU
080				0xD07B	JMP	PRSTR3			// LOOP UNTIL NULL TERM
081	PRSTRLF		0x700E	IOW	Reg0,LD_CON_ADR	// LOAD CONSTANTS ADDRESS
082	PRSTR2		0x610E	IOR	Reg1,RD_CON_DAT	// READ CHAR (NEXT)
083				0x5100	CMP	Reg1,0X00		// IS END OF STRING?
084				0xF08A	BNE	SKIPPS			// NOT END OF STRING
085				0x410D	LRI	Reg1,0X0D		// CR
086				0xC0B9	JSR	WRVDU			// 
087				0x410A	LRI	Reg1,0X0A		// LF
088				0xC0B9	JSR	WRVDU			// 
089				0x3008	RTS					// RETURN IF END
08a	SKIPPS		0xC0B9	JSR	WRVDU			// PRINT TO VDU
08b				0xD082	JMP	PRSTR2			// LOOP UNTIL NULL TERM
08c	RDKBD		0xC08F	JSR	WTKBRX			// WAIT FOR KBD RX CHAR
08d				0x610D	IOR	Reg1,KBD_DATA	// READ KBD CHAR
08e				0x3008	RTS					// 
08f	WTKBRX		0x600C	IOR	Reg0,KBD_STAT	// READ KBD STATUS
090				0xA001	ARI	Reg0,0X01		// RX RDY BIT
091				0xE08F	BEZ	WTKBRX			// LOOP UNTIL CHAR PRESENT
092				0x3008	RTS					// 
093	POLLKBD		0x610C	IOR	Reg1,KBD_STAT	// 
094				0x3008	RTS					// 
095	INITUART	0x4003	LRI	Reg0,0X03		// RESET UART COMMAND
096				0x7008	IOW	Reg0,UART_CTRL	// WRITE UART CMD REG
097				0x4020	LRI	Reg0,0X20		// TX CTRLS RTS
098				0x7008	IOW	Reg0,UART_CTRL	// WRITE UART CMD REG
099				0x3008	RTS					// 
09a	RDUART		0xC09D	JSR	WTUARTRXRDY		// WAIT FOR UART RX CHAR
09b				0x6109	IOR	Reg1,UART_RX	// READ UART CHAR
09c				0x3008	RTS					// RETURN KBD DATA IN REG1
09d	WTUARTRXRDY	0x6108	IOR	Reg1,UART_STAT	// READ UART STATUS
09e				0xA101	ARI	Reg1,0X01		// RX RDY BIT
09f				0xE09D	BEZ	WTUARTRXRDY		// LOOP UNTIL CHAR PRESENT
0a0				0x3008	RTS					// 
0a1	WRUART		0xC0A4	JSR	WTUARTTXBSY		// WRITE REG1 TO THE UART TX
0a2				0x7109	IOW	Reg1,UART_TX	// 
0a3				0x3008	RTS					// 
0a4	WTUARTTXBSY	0x6008	IOR	Reg0,UART_STAT	// WRITE REG1 OUT UART
0a5				0xA002	ARI	Reg0,0X02		// TX EMPTY BIT
0a6				0xE0A4	BEZ	WTUARTTXBSY		// LOOP WHILE NOT EMPTY
0a7				0x3008	RTS					// 
0a8	INITVDU		0x4003	LRI	Reg0,0X03		// RESET TERMINAL COMMAND
0a9				0x700A	IOW	Reg0,VDU_CTRL	// WRITE VDU CMD REG
0aa				0x4020	LRI	Reg0,0X20		// TX CTRLS RTS
0ab				0x700A	IOW	Reg0,VDU_CTRL	// WRITE VDU CMD REG
0ac	CLRSCR		0x410C	LRI	Reg1,0X0C		// ANSI CLEAR THE SCREEN CMD
0ad				0xC0B9	JSR	WRVDU			// WRITE OUT CHAR IN R1
0ae	YELLOW		0x411B	LRI	Reg1,0X1B		// ESC SEQ FOR YELLOW CHARS
0af				0xC0B9	JSR	WRVDU			// WRITE OUT CHAR IN R1
0b0				0x415B	LRI	Reg1,0X5B		// [
0b1				0xC0B9	JSR	WRVDU			// WRITE OUT CHAR IN R1
0b2				0x4133	LRI	Reg1,0X33		// 3
0b3				0xC0B9	JSR	WRVDU			// WRITE OUT CHAR IN R1
0b4				0x4133	LRI	Reg1,0X33		// 3
0b5				0xC0B9	JSR	WRVDU			// WRITE OUT CHAR IN R1
0b6				0x416D	LRI	Reg1,0X6D		// m 
0b7				0xC0B9	JSR	WRVDU			// WRITE OUT CHAR IN R1
0b8				0x3008	RTS					// 
0b9	WRVDU		0xC0BC	JSR	WTVDUTXRDY		// WAIT VDU TX READY
0ba				0x710B	IOW	Reg1,VDU_TX		// WRITE OUT R1 TO SCREEN
0bb				0x3008	RTS					// 
0bc	WTVDUTXRDY	0x600A	IOR	Reg0,VDU_STAT	// READ VDU STATUS
0bd				0xA002	ARI	Reg0,0X02		// TX EMPTY FLAG
0be				0xE0BC	BEZ	WTVDUTXRDY		// WAIT UNTIL TX EMPTY
0bf				0x3008	RTS					// 
0c0	VDUCRLF		0x410D	LRI	Reg1,0X0D		// CR
0c1				0xC0B9	JSR	WRVDU			// 
0c2				0x410A	LRI	Reg1,0X0A		// LF
0c3				0xC0B9	JSR	WRVDU			// 
0c4				0x3008	RTS					// 
0c5	CHKCTLC		0x610C	IOR	Reg1,KBD_STAT	// READ KBD STATUS
0c6				0x5100	CMP	0x01,0X00		// 
0c7				0xE0CD	BEQ	DONCTLC			// KEY WAS NOT PRESSED
0c8	SKPCTLC		0x600D	IOR	Reg0,KBD_DATA	// READ KBD DATA
0c9				0x5003	CMP	Reg0,0X03		// IS CTRL-C
0ca				0xF0CD	BNE	DONCTLC			// 
0cb				0x4001	LRI	Reg0,0X01		// RETURNS 1 IF CTRL-C
0cc				0xD0CE	JMP	EXITCTLC		// 
0cd	DONCTLC		0x4000	LRI	Reg0,0X00		// 
0ce	EXITCTLC	0x3008	RTS					// 
0cf	WAITSECS	0x7106	IOW	Reg1,WR_TIME_S	// STORE REG0 TO START TIMER
0d0	WTLPSEC		0x6104	IOR	Reg1,TIME_STAT	// READ TIMER
0d1				0xA101	ARI	Reg1,0X01		// CHECK BUSY
0d2				0xF0D0	BNZ	WTLPSEC			// 
0d3				0x3008	RTS					// 
