ADR LABEL		MACH	OPC	V1[,V2]			// COMMENT
000	START		0xC098	JSR	INITVDU			// INITIALIZE THE VDU
001				0xC085	JSR	INITUART		// INITIALIZE THE ACIA UART
002	RPT_MENU	0xC05B	JSR	PRINTMENU		// PRINT THE MENU
003	GETOPT		0xC07C	JSR	RDKBD			// READ UART RX TO REG1
004				0x5131	CMP	Reg1,0X31		// OPT01 SELECTED
005				0xF008	BNE	SKIPOPT01		// 
006				0xC01A	JSR	RUNOPT01		// GO OPTION 1
007				0xD019	JMP	DONEMENU		// 
008	SKIPOPT01	0x5132	CMP	Reg1,0X32		// OPT02 SELECTED
009				0xF00C	BNE	SKIPOPT02		// 
00a				0xC026	JSR	RUNOPT02		// GO OPTION 2
00b				0xD019	JMP	DONEMENU		// 
00c	SKIPOPT02	0x5133	CMP	Reg1,0X33		// OPT02 SELECTED
00d				0xF010	BNE	SKIPOPT03		// 
00e				0xC031	JSR	RUNOPT03		// GO OPTION 3
00f				0xD019	JMP	DONEMENU		// 
010	SKIPOPT03	0x5134	CMP	Reg1,0X34		// OPT02 SELECTED
011				0xF014	BNE	SKIPOPT04		// 
012				0xC03D	JSR	RUNOPT04		// GO OPTION 4
013				0xD019	JMP	DONEMENU		// 
014	SKIPOPT04	0x5135	CMP	Reg1,0X35		// OPT02 SELECTED
015				0xF018	BNE	SKIPOPT05		// 
016				0xC048	JSR	RUNOPT05		// GO OPTION 5
017				0xD019	JMP	DONEMENU		// 
018	SKIPOPT05	0xD003	JMP	GETOPT			// 
019	DONEMENU	0xD002	JMP	RPT_MENU		// 
01a	RUNOPT01	0x4131	LRI	Reg1,0X31		// ECHO ‘1’
01b				0xC0A9	JSR	WRVDU			// 
01c				0xC0B0	JSR	VDUCRLF,0X0D	// CR
01d				0x416B	LRI	Reg1,CTLCEXIT	// 
01e				0xC071	JSR	PRSTRLF			// 
01f	RPTOPT01	0xC0B5	JSR	CHKCTLC			// 
020				0x5001	CMP	Reg0,0X01		// 
021				0xE025	BEQ	EXITOPT1		// 
022				0xC08A	JSR	RDUART			// 
023	OPT1OUT		0xC0A9	JSR	WRVDU			// 
024				0xD01F	JMP	RPTOPT01		// 
025	EXITOPT1	0x3008	RTS					// 
026	RUNOPT02	0x4132	LRI	Reg1,0X32		// ECHO ‘2’
027				0xC0A9	JSR	WRVDU			// 
028				0xC0B0	JSR	VDUCRLF,0X0D	// CR
029	RPTOPT02	0xC07C	JSR	RDKBD			// 
02a				0x5103	CMP	Reg1,0X03		// 
02b				0xE030	BEQ	EXITOPT2		// 
02c				0x416B	LRI	Reg1,CTLCEXIT	// 
02d				0xC071	JSR	PRSTRLF			// 
02e	OPT2OUT		0xC091	JSR	WRUART			// 
02f				0xD029	JMP	RPTOPT02		// 
030	EXITOPT2	0x3008	RTS					// 
031	RUNOPT03	0x4133	LRI	Reg1,0X33		// ECHO ‘3’
032				0xC0A9	JSR	WRVDU			// 
033				0xC0B0	JSR	VDUCRLF,0X0D	// CR
034				0x416B	LRI	Reg1,CTLCEXIT	// 
035				0xC071	JSR	PRSTRLF			// 
036	RPTOPT03	0xC0B5	JSR	CHKCTLC			// CHECK KBD FOR CTRL-C
037				0x5001	CMP	Reg0,0X01		// 
038				0xE03C	BEQ	EXITOP3			// 
039				0xC08A	JSR	RDUART			// 
03a				0xC091	JSR	WRUART			// 
03b				0xD036	JMP	RPTOPT03		// 
03c	EXITOP3		0x3008	RTS					// 
03d	RUNOPT04	0x4134	LRI	Reg1,0X34		// ECHO ‘4’
03e				0xC0A9	JSR	WRVDU			// 
03f				0xC0B0	JSR	VDUCRLF,0X0D	// CR
040				0x416B	LRI	Reg1,CTLCEXIT	// 
041				0xC071	JSR	PRSTRLF			// 
042	RPTOPT04	0xC07C	JSR	RDKBD			// 
043				0x5103	CMP	Reg1,0X03		// CTRL-C
044				0xE047	BEQ	EXIT04			// 
045				0xC0A9	JSR	WRVDU			// 
046				0xD042	JMP	RPTOPT04		// 
047	EXIT04		0x3008	RTS					// 
048	RUNOPT05	0x4135	LRI	Reg1,0X35		// ECHO ‘5’
049				0xC0A9	JSR	WRVDU			// 
04a				0xC0B0	JSR	VDUCRLF,0X0D	// CR
04b				0x416B	LRI	Reg1,CTLCEXIT	// 
04c				0xC071	JSR	PRSTRLF			// 
04d	RPTOPT05	0xC0B5	JSR	CHKCTLC			// CHECK KBD FOR CTRL-C
04e				0x5001	CMP	Reg0,0X01		// 
04f				0xE05A	BEQ	EXIT05			// 
050				0x7800	IOW	#0x00,USR_LED	// WRITE 0 TO LED
051				0x4001	LRI	Reg0,0X01		// 
052				0xC0BF	JSR	WAITSECS		// 
053				0xC0B5	JSR	CHKCTLC			// CHECK KBD FOR CTRL-C
054				0x5001	CMP	Reg0,0X01		// 
055				0xE05A	BEQ	EXIT05			// 
056				0x7900	IOW	#0x01,USR_LED	// WRITE 1 TO LED
057				0x4001	LRI	Reg0,0X01		// 
058				0xC0BF	JSR	WAITSECS		// 
059				0xD04D	JMP	RPTOPT05		// 
05a	EXIT05		0x3008	RTS					// 
05b	PRINTMENU	0x4100	LRI	Reg1,MENUTOP	// PRINT BANNER
05c				0xC071	JSR	PRSTRLF			// PRINT OUT STRING TO VDU
05d				0x4117	LRI	Reg1,OPT01		// PRINT MENU OPT01
05e				0xC071	JSR	PRSTRLF			// 
05f				0x4122	LRI	Reg1,OPT02		// PRINT MENU OPT02
060				0xC071	JSR	PRSTRLF			// 
061				0x412E	LRI	Reg1,OPT03		// PRINT MENU OPT03
062				0xC071	JSR	PRSTRLF			// 
063				0x413E	LRI	Reg1,OPT04		// PRINT MENU OPT04
064				0xC071	JSR	PRSTRLF			// 
065				0x414E	LRI	Reg1,OPT05		// PRINT MENU OPT05
066				0xC071	JSR	PRSTRLF			// 
067				0x415A	LRI	Reg1,SELOPT		// PRINT MENU SELECT OPT
068				0xC06A	JSR	PRSTR			// 
069				0x3008	RTS					// 
06a	PRSTR		0x710E	IOW	Reg1,LD_CON_ADR	// LOAD CONSTANTS ADDRESS
06b	PRSTR3		0x610E	IOR	Reg1,RD_CON_DAT	// READ CHAR (NEXT)
06c				0x5100	CMP	Reg1,0X00		// IS END OF STRING?
06d				0xF06F	BNE	SKIPPS3			// NOT END OF STRING
06e				0x3008	RTS					// RETURN IF END
06f	SKIPPS3		0xC0A9	JSR	WRVDU			// PRINT TO VDU
070				0xD06B	JMP	PRSTR3			// LOOP UNTIL NULL TERM
071	PRSTRLF		0x710E	IOW	Reg1,LD_CON_ADR	// LOAD CONSTANTS ADDRESS
072	PRSTR2		0x610E	IOR	Reg1,RD_CON_DAT	// READ CHAR (NEXT)
073				0x5100	CMP	Reg1,0X00		// IS END OF STRING?
074				0xF07A	BNE	SKIPPS			// NOT END OF STRING
075				0x410D	LRI	Reg1,0X0D		// CR
076				0xC0A9	JSR	WRVDU			// 
077				0x410A	LRI	Reg1,0X0A		// LF
078				0xC0A9	JSR	WRVDU			// 
079				0x3008	RTS					// RETURN IF END
07a	SKIPPS		0xC0A9	JSR	WRVDU			// PRINT TO VDU
07b				0xD072	JMP	PRSTR2			// LOOP UNTIL NULL TERM
07c	RDKBD		0xC07F	JSR	WTKBRX			// WAIT FOR KBD RX CHAR
07d				0x610D	IOR	Reg1,KBD_DATA	// READ KBD CHAR
07e				0x3008	RTS					// 
07f	WTKBRX		0x600C	IOR	Reg0,KBD_STAT	// READ KBD STATUS
080				0xA001	ARI	Reg0,0X01		// RX RDY BIT
081				0xE07F	BEZ	WTKBRX			// LOOP UNTIL CHAR PRESENT
082				0x3008	RTS					// 
083	POLLKBD		0x600C	IOR	Reg0,KBD_STAT	// 
084				0x3008	RTS					// 
085	INITUART	0x4003	LRI	Reg0,0X03		// RESET UART COMMAND
086				0x7008	IOW	Reg0,UART_CTRL	// WRITE UART CMD REG
087				0x4020	LRI	Reg0,0X20		// TX CTRLS RTS
088				0x7008	IOW	Reg0,UART_CTRL	// WRITE UART CMD REG
089				0x3008	RTS					// 
08a	RDUART		0xC08D	JSR	WTUARTRXRDY		// WAIT FOR UART RX CHAR
08b				0x6109	IOR	Reg1,UART_RX	// READ UART CHAR
08c				0x3008	RTS					// RETURN KBD DATA IN REG1
08d	WTUARTRXRDY	0x6008	IOR	Reg0,UART_STAT	// READ UART STATUS
08e				0xA001	ARI	Reg0,0X01		// RX RDY BIT
08f				0xE08D	BEZ	WTUARTRXRDY		// LOOP UNTIL CHAR PRESENT
090				0x3008	RTS					// 
091	WRUART		0xC094	JSR	WTUARTTXBSY		// WRITE REG1 TO THE UART TX
092				0x7109	IOW	Reg1,UART_TX	// 
093				0x3008	RTS					// 
094	WTUARTTXBSY	0x6008	IOR	Reg0,UART_STAT	// WRITE REG1 OUT UART
095				0xA002	ARI	Reg0,0X02		// TX EMPTY BIT
096				0xE094	BEZ	WTUARTTXBSY		// LOOP WHILE NOT EMPTY
097				0x3008	RTS					// 
098	INITVDU		0x4003	LRI	Reg0,0X03		// RESET TERMINAL COMMAND
099				0x700A	IOW	Reg0,VDU_CTRL	// WRITE VDU CMD REG
09a				0x4020	LRI	Reg0,0X20		// TX CTRLS RTS
09b				0x700A	IOW	Reg0,VDU_CTRL	// WRITE VDU CMD REG
09c	CLRSCR		0x410C	LRI	Reg1,0X0C		// ANSI CLEAR THE SCREEN CMD
09d				0xC0A9	JSR	WRVDU			// WRITE OUT CHAR IN R1
09e	YELLOW		0x411B	LRI	Reg1,0X1B		// ESC SEQ FOR YELLOW CHARS
09f				0xC0A9	JSR	WRVDU			// WRITE OUT CHAR IN R1
0a0				0x415B	LRI	Reg1,0X5B		// [
0a1				0xC0A9	JSR	WRVDU			// WRITE OUT CHAR IN R1
0a2				0x4133	LRI	Reg1,0X33		// 3
0a3				0xC0A9	JSR	WRVDU			// WRITE OUT CHAR IN R1
0a4				0x4133	LRI	Reg1,0X33		// 3
0a5				0xC0A9	JSR	WRVDU			// WRITE OUT CHAR IN R1
0a6				0x416D	LRI	Reg1,0X6D		// m 
0a7				0xC0A9	JSR	WRVDU			// WRITE OUT CHAR IN R1
0a8				0x3008	RTS					// 
0a9	WRVDU		0xC0AC	JSR	WTVDUTXRDY		// WAIT VDU TX READY
0aa				0x710B	IOW	Reg1,VDU_TX		// WRITE OUT R1 TO SCREEN
0ab				0x3008	RTS					// 
0ac	WTVDUTXRDY	0x600A	IOR	Reg0,VDU_STAT	// READ VDU STATUS
0ad				0xA002	ARI	Reg0,0X02		// TX EMPTY FLAG
0ae				0xE0AC	BEZ	WTVDUTXRDY		// WAIT UNTIL TX EMPTY
0af				0x3008	RTS					// 
0b0	VDUCRLF		0x410D	LRI	Reg1,0X0D		// CR
0b1				0xC0A9	JSR	WRVDU			// 
0b2				0x410A	LRI	Reg1,0X0A		// LF
0b3				0xC0A9	JSR	WRVDU			// 
0b4				0x3008	RTS					// 
0b5	CHKCTLC		0x610C	IOR	Reg1,KBD_STAT	// READ KBD STATUS
0b6				0x5100	CMP	0x01,0X00		// 
0b7				0xE0BD	BEQ	DONCTLC			// KEY WAS NOT PRESSED
0b8	SKPCTLC		0x600D	IOR	Reg0,KBD_DATA	// READ KBD DATA
0b9				0x5003	CMP	Reg0,0X03		// IS CTRL-C
0ba				0xF0BD	BNE	DONCTLC			// 
0bb				0x4001	LRI	Reg0,0X01		// RETURNS 1 IF CTRL-C
0bc				0xD0BE	JMP	EXITCTLC		// 
0bd	DONCTLC		0x4000	LRI	Reg0,0X00		// 
0be	EXITCTLC	0x3008	RTS					// 
0bf	WAITSECS	0x7006	IOW	Reg0,WR_TIME_S	// STORE REG0 TO START TIMER
0c0	WTLPSEC		0x6104	IOR	Reg1,TIME_STAT	// READ TIMER
0c1				0xA101	ARI	Reg1,0X01		// CHECK BUSY
0c2				0xF0C0	BNZ	WTLPSEC			// 
0c3				0x3008	RTS					// 
